#!/usr/bin/env python3

import sys
import argparse
import csv
import json
import concurrent.futures
from constants import *
from utils import GoogleSheet
from utils import utils
from aruba_query import *


requests.packages.urllib3.disable_warnings()


def parse_csv(csvfile):
    ap_config_dict = {}
    with open(csvfile, "r") as ap_file:
        ap_import_data = csv.DictReader(ap_file, delimiter=",")
        for row in ap_import_data:
            ap_config_dict[utils.mac_to_colon_separated(row["MAC"]).lower()] = {
                "name": row["Name"],
                "group": row["Group"],
            }
    return ap_config_dict


def parse_gsheet(sheetid, gsheet_query):
    ap_config_dict = {}
    gsheet = gsheet_query.open_google_sheet(sheetid, 0)
    for row in gsheet:
        if row["MAC"] != "" and row["Name"] != "" and row["Group"] != "":
            ap_config_dict[utils.mac_to_colon_separated(row["MAC"]).lower()] = {"name": row["Name"], "group": row["Group"], "row": gsheet.index(row) + 2}
    return ap_config_dict


def query_down_aps(mc, inventory, query):
    down_aps = []
    command = "show+ap+database+long"
    response = query.aruba_show_command(mc, command, inventory)
    for ap in response["AP Database"]:
        if ap["Status"].startswith("Down"):
            down_aps.append(ap["Wired MAC Address"])
    return down_aps


def query_up_aps(mc, inventory, query):
    up_aps = []
    command = "show+ap+database+long"
    response = query.aruba_show_command(mc, command, inventory)
    for ap in response["AP Database"]:
        if ap["Status"].startswith("Up"):
            up_aps.append(ap["Wired MAC Address"])
    return up_aps


def main():
    # CLI parser for the command
    parser = argparse.ArgumentParser(description="Aruba AP rename")

    # Get input from CLI
    parser.add_argument(
        "--mac",
        help="Enter the MAC Address of the new AP",
    )
    parser.add_argument(
        "--group",
        default="None",
        help="Enter the AP group",
    )
    parser.add_argument(
        "--name",
        default="None",
        help="Enter the new AP name",
    )
    parser.add_argument(
        "--csv",
        help="CSV file to import",
    )
    parser.add_argument(
        "--gsheet",
        default="None",
        help="Enter the sheet id to open, make sure this sheet is shared with the API account",
    )
    parser.add_argument(
        "--force",
        action="store_true",
        default=False,
        help="Force the AP the change name or group",
    )

    # parse the arguments and print help if there are none
    if len(sys.argv) == 1:
        parser.print_help(sys.stderr)
        sys.exit(1)

    # read CLI into args
    args = parser.parse_args()

    # mobility controllers

    ap_config = {}
    query = ArubaQuery()
    inventory = ArubaInventory()
    arubapost = ArubaPost()
    gsheet_query = GoogleSheet()

    # get the api token for all controllers
    # with concurrent.futures.ThreadPoolExecutor() as executor:
    #     for mc in MOBILITY_CONDUCTORS:
    #         executor.submit(query.get_aruba_api_token, mc, PASSWORD, inventory)

    for mc in MOBILITY_CONDUCTORS:
        query.get_aruba_api_token(mc, PASSWORD, inventory)

    if args.csv:
        ap_config = parse_csv(args.csv)
    elif args.gsheet:
        ap_config = parse_gsheet(args.gsheet, gsheet_query)
        for mc in MOBILITY_CONDUCTORS:
            down_aps = query_down_aps(mc, inventory, query)
            up_aps = query_up_aps(mc, inventory, query)
        gsheet_query.highlight_missing_aps(args.gsheet, 0, down_aps, up_aps, ap_config)
    elif args.mac:
        ap_config[utils.mac_to_colon_separated(args.mac).lower()] = {"name": args.name, "group": args.group}

    else:
        print("You need to enter the data for an individual AP or import a CSV")

    with concurrent.futures.ThreadPoolExecutor() as executor:
        for mc in MOBILITY_CONDUCTORS:
            executor.submit(arubapost.rename_ap, mc, inventory, query, args, ap_config)


if __name__ == "__main__":
    main()
